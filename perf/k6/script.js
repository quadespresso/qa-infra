import http from 'k6/http';
import { check, group, sleep, fail } from 'k6';
import { randomIntBetween } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';
import { randomString } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';

export const options = {
    stages: [
        { duration: '60s', target: __ENV.VU },
        { duration: '5s', target: 0 },
    ],
    /*
    thresholds: {
        http_req_failed: ['rate<0.01'], // http errors should be less than 1%
        http_req_duration: ['p(95)<5000'], // 95% of requests should be below 5s
    },
    */
    insecureSkipTLSVerify: true,
};

export function setup() {
    const authToken = __ENV.MKE_AUTHTOKEN
    check(authToken, { 'admin logged in successfully': () => authToken !== '' });

    const userPrefix = randomString(5)
    const userIds = [];

    for (let i = 1; i <= __ENV.VU; i++) {
        // create MKE Users, make them admins for simplicity's sake so they can see k8s resources
        let body = {
            name: `${userPrefix}${i}`,
            password: "password",
            isActive: true,
            isAdmin: true,
        };

        const createUserResp = http.post(`${__ENV.BASE_URL}/accounts`, JSON.stringify(body), {
            headers: { 'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json' },
        });

        check (createUserResp, {"user created response": createUserResp.status === 201})
        const userId = createUserResp.json('id');
        check(userId, { 'user created': () => userId !== '' });
        userIds.push(userId)
    }

    return {"userPrefix": userPrefix, "adminAuthToken": authToken, "userIds": userIds}
}

export default (data) => {
    let stringData = JSON.stringify(data)
    let setupJson = JSON.parse(stringData)

    let userPrefix = setupJson.userPrefix

    //generated usernames are in the form "name${num}" where num is a random number between 1 and the number of simulated users
    const randomUser = randomIntBetween(1, __ENV.VU)

    let body = {
        username: `${userPrefix}${randomUser}`,
        password: "password",
    };

    // get Bearer token for user
    const userLoginRes = http.post(`${__ENV.BASE_URL}/auth/login`, JSON.stringify(body), {
        headers: { 'Content-Type': 'application/json' },
    });

    check (userLoginRes, {"Random user logins": userLoginRes.status === 200})
    const authToken = userLoginRes.json('auth_token');
    check(authToken, { 'Random user token exists': () => authToken !== '' });

    const requestConfigWithToken = (tag) => ({
        headers: {
            Authorization: `Bearer ${authToken}`,
        },
        tags: Object.assign(
            {},
            {
                name: 'tag',
            },
            tag
        ),
    });

    const res = http.get(`${__ENV.BASE_URL}/api/v1/namespaces`, requestConfigWithToken({ name: 'Get Namespaces' }));
    check(res, {"Get All Namespaces as random user": res.status === 200})
    const namespaceRespJson = JSON.parse(res.body)

    // Namespaces prefixed with 'test-' are the ones generated by ClusterLoader
    const namespacePrefix = 'test-';
    const testNamespaces = namespaceRespJson.items.filter(namespace => namespace.metadata.name.startsWith(namespacePrefix));
    if (testNamespaces.length > 0) {
      const randomNamespaceIndex = randomIntBetween(0, testNamespaces.length - 1);
      const randomNamespaceName = testNamespaces[randomNamespaceIndex].metadata.name;
      console.log(`Querying resources as user [${(userPrefix + randomUser + ']').padEnd(10, ' ')} from namespace [${randomNamespaceName}]`);
      group('Get Resources from Random Namespace as random user', () => {
        const responses = http.batch([
            ['GET', `${__ENV.BASE_URL}/api/v1/namespaces/${randomNamespaceName}/pods`, null, requestConfigWithToken({name: 'getpod'})],
            ['GET', `${__ENV.BASE_URL}/api/v1/namespaces/${randomNamespaceName}/secrets`, null, requestConfigWithToken( {name: 'getsecret'})],
            ['GET', `${__ENV.BASE_URL}/api/v1/namespaces/${randomNamespaceName}/services`,null,  requestConfigWithToken( {name: 'getservices'})],
            ['GET', `${__ENV.BASE_URL}/api/v1/namespaces/${randomNamespaceName}/configmaps`,null,  requestConfigWithToken( {name: 'getconfigmaps'})],
        ]);
        check(responses[0], {'get pods in random ns': (res) => res.status === 200})
        check(responses[1], {'get secrets in random ns': (res) => res.status === 200})
        check(responses[2], {'get services in random ns': (res) => res.status === 200})
        check(responses[3], {'get cms in random ns': (res) => res.status === 200})
      });
    } else {
        console.log(`Error: No namespaces with prefix "${namespacePrefix}" found.`);
    }
}

export function teardown(data) {
    let stringData = JSON.stringify(data)
    let setupJson = JSON.parse(stringData)

    let userIds = setupJson.userIds
    let authToken = setupJson.adminAuthToken

    for (let i = 0; i < userIds.length; i++) {
        let userId = userIds[i]
        // delete MKE Users
        const createUserResp = http.del(`${__ENV.BASE_URL}/accounts/${userId}`, null, {
            headers: { 'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json' },
        });

        check (createUserResp, {"delete users successfully": createUserResp.status === 204})
    }
}
